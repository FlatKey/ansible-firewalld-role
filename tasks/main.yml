---
- name: ensure firewalld is installed
  yum: name=firewalld state=present
  tags: firewalld

- name: ensure firewalld is enabled and started
  service: name=firewalld enabled=yes state=started
  tags: firewalld

- name: get actual firewalld default zone
  command: /bin/firewall-cmd --get-default-zone
  register: defaultzone
  changed_when: false
  tags: firewalld

- name: set firewalld default zone
  command: /bin/firewall-cmd --set-default-zone={{ default_zone|default('public') }}
  register: result
  when: defaultzone.stdout != default_zone | default('public')
  changed_when: result.stdout == "success"
  notify: restart firewalld
  tags: firewalld

- name: set firewalld zone interfaces
  shell: |
    if [[ "$(/bin/firewall-cmd --get-zone-of-interface={{ item.1 }})" != "{{ item.0.name }}" ]]
    then
      /bin/firewall-cmd --zone={{ item.0.name }} --add-interface={{ item.1 }} --permanent && echo "changed"
    fi
  with_subelements: 
    - "{{ firewalld_zone_interfaces|default([]) }}"
    - interfaces
  register: shell_result
  changed_when: shell_result.stdout | join('') is search('changed')
  notify: restart firewalld
  tags: firewalld

- name: get active ipsets 
  shell: set -o pipefail; /bin/firewall-cmd --permanent --get-ipsets
  args:
    executable: /bin/bash
  register: active_ipsets
  changed_when: false
  when: firewalld_ipsets is defined

- name: create any missing ipsets
  shell: set -o pipefail; /bin/firewall-cmd --permanent --new-ipset={{ item }} --type=hash:ip
  args:
    executable: /bin/bash
  register: created_ipsets
  become: true
  when:
  - firewalld_ipsets is defined
  - item not in active_ipsets.stdout | split
  loop: "{{ firewalld_ipsets | map(attribute='name') | list }}"

- name: get ipset entries
  shell: set -o pipefail; /bin/firewall-cmd --permanent --ipset={{ item }} --get-entries
  args:
    executable: /bin/bash
  register: ipset_entries
  changed_when: false
  when: firewalld_ipsets is defined
  loop: "{{ firewalld_ipsets | map(attribute='name') | list }}"

- name: remove ipset entries not defined in firewalld_ipsets
  shell: set -o pipefail; /bin/firewall-cmd --permanent --ipset={{ item.0.item }} --remove-entry={{ item.1 }}
  args:
    executable: /bin/bash
  when:
  - firewalld_ipsets is defined
  - item.1 not in (firewalld_ipsets | selectattr('name','equalto', item.0.item) | list)[0]['entries']
  loop: "{{ lookup('subelements', ipset_entries.results, 'stdout_lines', {'skip_missing': True}) }}"

- name: add ipset entries
  shell: set -o pipefail; /bin/firewall-cmd --permanent --ipset={{ item.0.name }} --add-entry={{ item.1 }}
  args:
    executable: /bin/bash
  register: created_entries
  become: true
  when:
  - firewalld_ipsets is defined
  changed_when: created_entries.stderr is not search('.*ALREADY_ENABLED.*')
  loop: "{{ lookup('subelements', firewalld_ipsets, 'entries', {'skip_missing': True}) }}"

- name: reload firewalld as ipsets can only be added as permanent
  shell: /bin/firewall-cmd --reload
  args:
    executable: /bin/bash
  become: true
  when:
  - created_ipsets is changed
  - created_entries is changed

- name: set firewalld zone source
  firewalld:
    zone: "{{ item.0.zone }}"
    permanent: "{{ item.0.permanent|default(true) }}"
    immediate: "{{ item.0.immediate|default(true) }}"
    state: "{{ item.0.state|default('enabled') }}"
    source: "{{ item.1 }}"
  with_subelements:
    - "{{ firewalld_zone_source|default({}) }}"
    - "source"
  notify: restart firewalld
  tags: firewalld

- name: get active firewalld service rules
  shell: set -o pipefail; /bin/firewall-cmd --list-services | sed -e 's/ /\n/g'
  args:
    executable: /bin/bash
  register: active_services
  changed_when: false
  tags: firewalld

- name: purge unconfigured firewalld service rules
  firewalld:
    service: "{{ item }}"
    permanent: true
    immediate: true
    state: disabled
    zone: "{{ default_zone|default('public') }}"
  with_items: "{{ active_services.stdout_lines }}"
  when: firewalld_purge_services and item not in firewalld_service_rules
  tags: firewalld

- name: get active firewalld port rules
  shell: set -o pipefail; /bin/firewall-cmd --list-ports | sed -e 's/ /\n/g'
  args:
    executable: /bin/bash
  register: active_ports
  changed_when: false
  tags: firewalld

- name: purge unconfigured firewalld port rules
  firewalld:
    port: "{{ item }}"
    permanent: true
    immediate: true
    state: disabled
    zone: "{{ default_zone|default('public') }}"
  with_items: "{{ active_ports.stdout_lines }}"
  when: firewalld_purge_ports and item | regex_replace('[^0-9]+','') not in firewalld_port_rules | dict2items | map(attribute='value.port') | map('string') | list
  tags: firewalld

- name: set firewalld service rules
  firewalld:
    service: "{{ item.value.service | default(item.key) }}"
    permanent: "{{ item.value.permanent|default(true) }}"
    immediate: "{{ item.value.immediate|default(true) }}"
    state: "{{ item.value.state|default('enabled') }}"
    zone: "{{ item.value.zone|default('public') }}"
  with_dict: "{{ firewalld_service_rules|default({}) }}"
  tags: firewalld

- name: set firewalld port rules
  firewalld:
    port: "{{ item.value.port }}/{{ item.value.protocol|default('tcp') }}"
    permanent: "{{ item.value.permanent|default(true) }}"
    immediate: "{{ item.value.immediate|default(true) }}"
    state: "{{ item.value.state|default('enabled') }}"
    zone: "{{ item.value.zone|default('public') }}"
  with_dict: "{{ firewalld_port_rules|default({}) }}"
  tags: firewalld

- name: set firewalld rich rules
  firewalld:
    rich_rule: "{{ item.value.rule }}"
    permanent: "{{ item.value.permanent|default(true) }}"
    immediate: "{{ item.value.immediate|default(true) }}"
    state: "{{ item.value.state|default('enabled') }}"
    zone: "{{ item.value.zone|default('public') }}"
  with_dict: "{{ firewalld_rich_rules|default({}) }}"
  tags: firewalld
